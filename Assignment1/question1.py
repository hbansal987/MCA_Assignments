# -*- coding: utf-8 -*-
"""Question1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1J30vUBA64KouxzfnNSx-KoRlivL7ibaV
"""

!unzip -uq "/content/drive/My Drive/HW-1.zip" -d "/content/drive/My Drive/"

import numpy as np
import cv2
import math

def clusterForm(image):
  for i in image:
    for j in i:
      #print("j ", j)
      j[0] = changeColor(j[0]) 
      j[1] = changeColor(j[1])
      j[2] = changeColor(j[2])
      #print("j",j)
  return(image)

def changeColor(v):
  if(v<64):
    return 0
  if(v < 128):
    return 1
  if(v<192):
    return 2
  if(v<256):
    return 3

def autocorrelogram(image):
  
  #print("1111111111 " ,image.shape)
  image = cv2.resize(image,(500,500))
  """Z = image.reshape((-1, 3)).astype(np.float32)
  #print("2222222222 " ,Z.shape)
  K = 64

  #ret, label, centre = cv2.kmeans(Z,K,bestLabels= None,(cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 10, 1.0),10,flags = cv2.KMEANS_PP_CENTERS)
  ret, label, centre = cv2.kmeans(data=Z, K=64, criteria=(cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 4, 1.0),
                                    attempts=4, flags=cv2.KMEANS_PP_CENTERS,
                                    bestLabels=None)
  #centre = np.uint8(centre)
  x = label.flatten()
  res = centre[x]
  res2 = res.reshape((image.shape))

  print("res ",res)
  print("res2", res2)
  print("res2.shape " , res2.shape)
  print("res.shape ", res.shape)

  print("HIMANSHU ", res[4000])
  unique_res = unique(np.array(res))

  print("unique_res" , unique_res)

  print("unique_res.shape ", unique_res.shape)

  #print("unique_res ", unique_res)

  print("res2.shape ", res2.shape)"""

  D = [1,3,5,7]
  img = clusterForm(image)
  #print("img ", img[250,250,2])
  bins = []
  
  for i in range (4):
    for j in range(4):
      for k in range (4):
        temp = []
        temp.append(0)
        temp.append(0)
        temp.append(0)
        temp[0] = i
        temp[1] = j
        temp[2] = k
        bins.append(temp)
  #print("bins ", bins)
  result = correlogram(img,bins,D)

  return result

def correlogram(image,Cm,D):

  #print("CORRELOGRAM 1")
  X,Y,t = image.shape
  colorspercent = []

  for d in (D):

    color_array = []
    color_count =0
    for c in range (len(Cm)):
      color_array.append(0)

    #print("d " , d)
    for x in range(0, X, int(round(X / 5))):
      for y in range(0, Y, int(round(Y / 5))):
        #print("x ",x)
        #print("y ",y)
        Ci = image[x][y]
        Cn = getNeighbour(X,Y,x,y,d)

        for j in Cn:
          Cj = image[j[0]][j[1]]

          for m in range(len(Cm)):
            if((len(Cm[m]) == len (Cj)) and(len(Cm[m]) == len(Ci))):
              for s in range (len(Cm[m])):
                #print("22222222222")
                if(((Cm[m])[s] == Cj[s]) and ((Cm[m])[s] == Ci[s])):
                  flag=1
                else:
                  flag=0
                if(flag==1):
                  color_count = color_count+1;
                  color_array[m] = color_array[m] + 1
            

    #print("Bye")
    for i in range (len(color_array)):
      color_array[i] = color_array[i]/color_count

    colorspercent.append(color_array)

  return colorspercent

def getNeighbour(X,Y,x,y,d):
  p1 = (x+d,y+d)
  p2 = (x-d,y-d)
  p3 = (x+d,y)
  p4 = (x-d,y)
  p5 = (x,y+d)
  p6 = (x,y-d)
  p7 = (x+d,y-d)
  p8 = (x-d,y+d)

  p = [p1,p2,p3,p4,p5,p6,p7,p8]

  C = []
  for i in p:
    if(i[0] >= 0 and i[0] <X):
      if([i[1] >= 0 and i[1] <Y]):
        C.append(i)

  return C

### Change IT ###
"""def unique(a):
  order = np.lexsort(a.T)
  a = a[order]
  diff = np.diff(a, axis = 0)
  ui = np.ones(len(a), 'bool')
  ui[1:] = (diff != 0).any(axis = 1)
  return a[ui]"""

"""import glob
import pickle
import time
import cv2
a= cv2.imread("/content/drive/My Drive/HW-1/images/all_souls_000000.jpg")
ans = autocorrelogram(a)
print("ans ", ans)"""

import glob
import pickle
import time
from pathlib import Path

path = "/content/drive/My Drive/HW-1/images/*.jpg"
flag=0
ans_final = []
t=[]
for file in glob.glob(path):
  try:
    if(flag > 3140):
      print(flag)
      print(file)
      #d = file.spilt(".")
      #print(d[0])
      d = Path(file).stem
      print(d)
      start_time = time.time()
      a= cv2.imread(file)
      ans = autocorrelogram(a)
      print(ans)
      
      print("Total Time Taken (in seconds): {}".format(time.time() - start_time))
      t.append(time.time() - start_time)
      output = open('/content/drive/My Drive/PickleFile_Question1/'+ d + '.pickle', 'wb')
      pickle.dump(ans, output)
      #if(flag==5):
      #  break
    flag=flag+1
  except:
    print("some error has occured")

#print(len(ans_final))

"""import glob
import pickle
import time
from pathlib import Path

path = "/content/drive/My Drive/PickleFile_Question1/*.pickle"

u =0
for file in glob.glob(path):
  print(file)
  u=u+1

print(u)

output2 = open('/content/drive/My Drive/question1_time_kmeans__last_final.pickle', 'wb')
#with open("/content/drive/My Drive/HW-1/images/source_object_name.pkl") as f:
pickle.dump(t, output2)

#import pickle
DATA_PATH = "/content/drive/My Drive/PickleFile_Question1"
infile = open(DATA_PATH+'/new_000853.pickle','rb')
best_model2 = pickle.load(infile)
print(best_model2)
"""

#print(len(best_model2))

"""import pickle
DATA_PATH = "/content/drive/My Drive/PickleFile_Question1"
infile = open('/content/drive/My Drive/HW-1/source_object_name.pickle','rb')
best_model2 = pickle.load(infile)
print(len(best_model2))"""